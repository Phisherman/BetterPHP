<?php
/**
 * Extends the string type by useful functions
 */
class BTRString {

    /**
     * Checks if a string contains a needle
     * @see strpos();
     * @param string $haystack the haystack to search in
     * @param string $needle the needle to search. No-String parameters will be converted using strval()!
     * @param bool $ignorecase Ignore case
     * @return boolean
     */
    static function Contains($haystack, $needle, $ignorecase = false) {
        if (empty($needle) || empty($haystack) || !is_string($haystack)) {
            return false;
        }
        if (!is_string($needle)) {
            $needle = strval($needle);
        }
        return $ignorecase === true ? strpos(strtolower($haystack), strtolower($needle)) !== false : strpos($haystack, $needle) !== false;
    }

    /**
     * Checks if a string starts with another string
     * @param string $haystack the haystack to search in
     * @param string $needle the string the haystack has to start with
     * @param bool $ignorecase Ignore case
     * @return boolean
     */
    static function StartsWith($haystack, $needle, $ignorecase = false) {
        if (empty($needle) || empty($haystack) || !is_string($haystack)) {
            return false;
        }
        if (!is_string($needle)) {
            $needle = strval($needle);
        }
        $haystackLength = strlen($haystack);
        $needleLength = strlen($needle);
        if ($needleLength > $haystackLength) {
            return false;
        }
        for ($i = 0; $i < $needleLength; $i++) {
            if (($ignorecase === true && strtolower($haystack[$i]) != strtolower($needle[$i])) || ($ignorecase === false && $haystack[$i] != $needle[$i])) {
                return false;
            }
        }
        return true;
    }

    /**
     * Checks if a string ends with another string
     * @param string $haystack the haystack to search in
     * @param string $needle the string the haystack has to start with
     * @param bool $ignorecase Ignore case
     * @return boolean
     */
    static function EndsWith($haystack, $needle, $ignorecase = false) {
        if (empty($needle) || empty($haystack) || !is_string($haystack)) {
            return false;
        }
        if (!is_string($needle)) {
            $needle = strval($needle);
        }
        $haystackLength = strlen($haystack);
        $needleLength = strlen($needle);
        if ($needleLength > $haystackLength) {
            return false;
        }
        if ($ignorecase) {
            $needle = strtolower($needle);
            $haystack = strtolower($haystack);
        }
        $index = strrpos($haystack, $needle);
        if ($index === false) {
            return false;
        }
        return $index + $needleLength == $haystackLength;
    }

    /**
     * Checks if a pattern applies on a string
     * @param string $haystack the string to search in
     * @param string $needle the regex pattern
     * @return boolean
     */
    static function Match($haystack, $needle) {
        if (empty($needle) || empty($haystack) || !is_string($haystack)) {
            return false;
        }
        $match = false;
        try {
            $match = preg_match_all($needle, $haystack) != 0;
        } catch (Exception $ex) {
            $match = false;
        }
        return $match;
    }

}

?>
